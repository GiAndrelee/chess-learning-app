{"ast":null,"code":"const findBestMove = (gameInstance, depth) => {\n  const moves = gameInstance.moves();\n  let bestEval = -Infinity;\n  let bestMove = moves[Math.floor(Math.random() * moves.length)];\n  for (let move of moves) {\n    const clone = new Chess(gameInstance.fen());\n    clone.move(move);\n    const evaluation = -evaluateBoard(clone); // <-- using 'evaluation' now\n    if (evaluation > bestEval) {\n      bestEval = evaluation;\n      bestMove = move;\n    }\n  }\n  return bestMove;\n};","map":{"version":3,"names":["findBestMove","gameInstance","depth","moves","bestEval","Infinity","bestMove","Math","floor","random","length","move","clone","Chess","fen","evaluation","evaluateBoard"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["const findBestMove = (gameInstance, depth) => {\n  const moves = gameInstance.moves();\n  let bestEval = -Infinity;\n  let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n  for (let move of moves) {\n    const clone = new Chess(gameInstance.fen());\n    clone.move(move);\n    const evaluation = -evaluateBoard(clone);  // <-- using 'evaluation' now\n    if (evaluation > bestEval) {\n      bestEval = evaluation;\n      bestMove = move;\n    }\n  }\n\n  return bestMove;\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,YAAY,EAAEC,KAAK,KAAK;EAC5C,MAAMC,KAAK,GAAGF,YAAY,CAACE,KAAK,CAAC,CAAC;EAClC,IAAIC,QAAQ,GAAG,CAACC,QAAQ;EACxB,IAAIC,QAAQ,GAAGH,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC;EAE9D,KAAK,IAAIC,IAAI,IAAIR,KAAK,EAAE;IACtB,MAAMS,KAAK,GAAG,IAAIC,KAAK,CAACZ,YAAY,CAACa,GAAG,CAAC,CAAC,CAAC;IAC3CF,KAAK,CAACD,IAAI,CAACA,IAAI,CAAC;IAChB,MAAMI,UAAU,GAAG,CAACC,aAAa,CAACJ,KAAK,CAAC,CAAC,CAAE;IAC3C,IAAIG,UAAU,GAAGX,QAAQ,EAAE;MACzBA,QAAQ,GAAGW,UAAU;MACrBT,QAAQ,GAAGK,IAAI;IACjB;EACF;EAEA,OAAOL,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}