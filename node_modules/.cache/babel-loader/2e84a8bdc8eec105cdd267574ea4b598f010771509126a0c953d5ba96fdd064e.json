{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [fen, setFen] = useState(game.fen());\n  const [advice, setAdvice] = useState(\"\");\n  const [gameOver, setGameOver] = useState(false);\n\n  // Handle player move\n  const handleMove = (sourceSquare, targetSquare) => {\n    const newGame = new Chess(game.fen());\n\n    // Only allow player (White) to move if it's their turn\n    if (newGame.turn() !== 'w') {\n      return false;\n    }\n    const move = newGame.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // Always promote to queen\n    });\n    if (move === null) return false; // Illegal move\n\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice(\"\");\n    if (newGame.isGameOver()) {\n      setGameOver(true);\n    } else {\n      setTimeout(makeComputerMove, 500); // Let computer move after\n    }\n    return true;\n  };\n\n  // Handle computer move (Black side)\n  const makeComputerMove = () => {\n    const newGame = new Chess(game.fen());\n    if (newGame.turn() !== 'b') {\n      return; // Only let computer move if it's black's turn\n    }\n    const possibleMoves = newGame.moves();\n    if (possibleMoves.length === 0) {\n      setGameOver(true);\n      return;\n    }\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    newGame.move(randomMove);\n    setGame(newGame);\n    setFen(newGame.fen());\n    if (newGame.isGameOver()) {\n      setGameOver(true);\n    }\n  };\n\n  // Function to get advice\n  const getAdvice = () => {\n    const possibleMoves = game.moves();\n    if (possibleMoves.length > 0) {\n      const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n      setAdvice(`Hint: Try the move ${randomMove}`);\n    } else {\n      setAdvice(\"No advice available!\");\n    }\n  };\n\n  // Reset the game\n  const resetGame = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice(\"\");\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Learning App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onPieceDrop: (source, target) => handleMove(source, target),\n      boardWidth: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [gameOver ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getAdvice,\n        children: \"Get Hint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 43\n      }, this), advice && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: advice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kF7IHVq9J4N7rhQeXpk+Hm+l1ks=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Chess","Chessboard","jsxDEV","_jsxDEV","App","_s","game","setGame","fen","setFen","advice","setAdvice","gameOver","setGameOver","handleMove","sourceSquare","targetSquare","newGame","turn","move","from","to","promotion","isGameOver","setTimeout","makeComputerMove","possibleMoves","moves","length","randomMove","Math","floor","random","getAdvice","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","onPieceDrop","source","target","boardWidth","style","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"./App.css\";\n\nfunction App() {\n  const [game, setGame] = useState(new Chess());\n  const [fen, setFen] = useState(game.fen());\n  const [advice, setAdvice] = useState(\"\");\n  const [gameOver, setGameOver] = useState(false);\n\n  // Handle player move\n  const handleMove = (sourceSquare, targetSquare) => {\n    const newGame = new Chess(game.fen());\n\n    // Only allow player (White) to move if it's their turn\n    if (newGame.turn() !== 'w') {\n      return false;\n    }\n\n    const move = newGame.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\", // Always promote to queen\n    });\n\n    if (move === null) return false; // Illegal move\n\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice(\"\");\n\n    if (newGame.isGameOver()) {\n      setGameOver(true);\n    } else {\n      setTimeout(makeComputerMove, 500); // Let computer move after\n    }\n    return true;\n  };\n\n  // Handle computer move (Black side)\n  const makeComputerMove = () => {\n    const newGame = new Chess(game.fen());\n\n    if (newGame.turn() !== 'b') {\n      return; // Only let computer move if it's black's turn\n    }\n\n    const possibleMoves = newGame.moves();\n    if (possibleMoves.length === 0) {\n      setGameOver(true);\n      return;\n    }\n\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    newGame.move(randomMove);\n\n    setGame(newGame);\n    setFen(newGame.fen());\n\n    if (newGame.isGameOver()) {\n      setGameOver(true);\n    }\n  };\n\n  // Function to get advice\n  const getAdvice = () => {\n    const possibleMoves = game.moves();\n    if (possibleMoves.length > 0) {\n      const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n      setAdvice(`Hint: Try the move ${randomMove}`);\n    } else {\n      setAdvice(\"No advice available!\");\n    }\n  };\n\n  // Reset the game\n  const resetGame = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice(\"\");\n    setGameOver(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chess Learning App</h1>\n      <Chessboard\n        position={fen}\n        onPieceDrop={(source, target) => handleMove(source, target)}\n        boardWidth={400}\n      />\n      <div style={{ marginTop: 20 }}>\n        {gameOver ? <h2>Game Over!</h2> : <button onClick={getAdvice}>Get Hint</button>}\n        {advice && <p>{advice}</p>}\n        <br />\n        <button onClick={resetGame}>Reset Game</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}