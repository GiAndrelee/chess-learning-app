{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport Confetti from 'react-confetti';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [advice, setAdvice] = useState('');\n  const [hint, setHint] = useState('');\n  const [playingAgainstComputer, setPlayingAgainstComputer] = useState(false);\n  const [isComputerMove, setIsComputerMove] = useState(false);\n  useEffect(() => {\n    if (game.game_over()) {\n      setGameOver(true);\n      if (game.in_checkmate()) {\n        setShowConfetti(true);\n      }\n    } else {\n      setGameOver(false);\n    }\n    if (playingAgainstComputer && !isComputerMove && !game.game_over()) {\n      setIsComputerMove(true);\n      makeComputerMove();\n    }\n  }, [game, playingAgainstComputer, isComputerMove]);\n  const restartGame = () => {\n    setGame(new Chess());\n    setShowConfetti(false);\n    setGameOver(false);\n    setAdvice('');\n    setHint('');\n    setIsComputerMove(false);\n  };\n  const makeMove = move => {\n    let newGame = {\n      ...game\n    };\n    const result = newGame.move(move);\n    if (result) {\n      setGame(newGame);\n      setAdvice(analyzeMove(newGame));\n      setHint(generateHint(newGame));\n    }\n  };\n  const analyzeMove = newGame => {\n    // Analyze the move and give feedback\n    if (newGame.in_checkmate()) {\n      return \"Checkmate! Great job!\";\n    }\n    if (newGame.in_check()) {\n      return \"You're in check, make sure to protect your king!\";\n    }\n    if (isMistake(newGame)) {\n      return \"You made a mistake! Try considering other options.\";\n    }\n    return \"Good move!\";\n  };\n  const generateHint = newGame => {\n    // You can add logic here for generating hints based on the position\n    if (newGame.game_over()) {\n      return '';\n    }\n    return \"Remember to control the center and protect your pieces!\";\n  };\n  const isMistake = newGame => {\n    // Simple mistake analysis: if the game is in a worse position after the move, flag it as a mistake\n    const gameClone = {\n      ...newGame\n    };\n    const previousScore = evaluatePosition(gameClone);\n    gameClone.undo();\n    const newScore = evaluatePosition(gameClone);\n    return newScore < previousScore;\n  };\n  const evaluatePosition = gameClone => {\n    // Simple evaluation function based on material balance (more advanced evaluation can be added here)\n    let score = 0;\n    gameClone.board().forEach(row => {\n      row.forEach(square => {\n        if (square) {\n          const pieceValue = pieceValues[square.type];\n          score += square.color === 'w' ? pieceValue : -pieceValue;\n        }\n      });\n    });\n    return score;\n  };\n  const makeComputerMove = () => {\n    // Simple computer move logic (you can replace it with more sophisticated AI)\n    const possibleMoves = game.ugly_moves();\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    makeMove(randomMove);\n    setIsComputerMove(false);\n  };\n  const pieceValues = {\n    p: 1,\n    // Pawn\n    n: 3,\n    // Knight\n    b: 3,\n    // Bishop\n    r: 5,\n    // Rook\n    q: 9,\n    // Queen\n    k: 1000 // King (very high value)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [showConfetti && /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      width: 400,\n      position: game.fen(),\n      onDrop: (sourceSquare, targetSquare) => {\n        const move = game.move({\n          from: sourceSquare,\n          to: targetSquare\n        });\n        if (move) {\n          makeMove(move);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: \"Game Over!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"advice\",\n      children: advice && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Advice:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 23\n        }, this), \" \", advice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hint\",\n      children: hint && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hint:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), \" \", hint]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPlayingAgainstComputer(!playingAgainstComputer),\n      children: playingAgainstComputer ? 'Play Against Yourself' : 'Play Against Computer'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"m6+7D6zib93aIGZKvlMydaHXROg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","Confetti","jsxDEV","_jsxDEV","App","_s","game","setGame","showConfetti","setShowConfetti","gameOver","setGameOver","advice","setAdvice","hint","setHint","playingAgainstComputer","setPlayingAgainstComputer","isComputerMove","setIsComputerMove","game_over","in_checkmate","makeComputerMove","restartGame","makeMove","move","newGame","result","analyzeMove","generateHint","in_check","isMistake","gameClone","previousScore","evaluatePosition","undo","newScore","score","board","forEach","row","square","pieceValue","pieceValues","type","color","possibleMoves","ugly_moves","randomMove","Math","floor","random","length","p","n","b","r","q","k","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","position","fen","onDrop","sourceSquare","targetSquare","from","to","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport Confetti from 'react-confetti';\nimport './App.css';\n\nconst App = () => {\n  const [game, setGame] = useState(new Chess());\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [advice, setAdvice] = useState('');\n  const [hint, setHint] = useState('');\n  const [playingAgainstComputer, setPlayingAgainstComputer] = useState(false);\n  const [isComputerMove, setIsComputerMove] = useState(false);\n\n  useEffect(() => {\n    if (game.game_over()) {\n      setGameOver(true);\n      if (game.in_checkmate()) {\n        setShowConfetti(true);\n      }\n    } else {\n      setGameOver(false);\n    }\n\n    if (playingAgainstComputer && !isComputerMove && !game.game_over()) {\n      setIsComputerMove(true);\n      makeComputerMove();\n    }\n  }, [game, playingAgainstComputer, isComputerMove]);\n\n  const restartGame = () => {\n    setGame(new Chess());\n    setShowConfetti(false);\n    setGameOver(false);\n    setAdvice('');\n    setHint('');\n    setIsComputerMove(false);\n  };\n\n  const makeMove = (move) => {\n    let newGame = { ...game };\n    const result = newGame.move(move);\n    if (result) {\n      setGame(newGame);\n      setAdvice(analyzeMove(newGame));\n      setHint(generateHint(newGame));\n    }\n  };\n\n  const analyzeMove = (newGame) => {\n    // Analyze the move and give feedback\n    if (newGame.in_checkmate()) {\n      return \"Checkmate! Great job!\";\n    }\n    if (newGame.in_check()) {\n      return \"You're in check, make sure to protect your king!\";\n    }\n    if (isMistake(newGame)) {\n      return \"You made a mistake! Try considering other options.\";\n    }\n    return \"Good move!\";\n  };\n\n  const generateHint = (newGame) => {\n    // You can add logic here for generating hints based on the position\n    if (newGame.game_over()) {\n      return '';\n    }\n    return \"Remember to control the center and protect your pieces!\";\n  };\n\n  const isMistake = (newGame) => {\n    // Simple mistake analysis: if the game is in a worse position after the move, flag it as a mistake\n    const gameClone = { ...newGame };\n    const previousScore = evaluatePosition(gameClone);\n    gameClone.undo();\n    const newScore = evaluatePosition(gameClone);\n    return newScore < previousScore;\n  };\n\n  const evaluatePosition = (gameClone) => {\n    // Simple evaluation function based on material balance (more advanced evaluation can be added here)\n    let score = 0;\n    gameClone.board().forEach(row => {\n      row.forEach(square => {\n        if (square) {\n          const pieceValue = pieceValues[square.type];\n          score += square.color === 'w' ? pieceValue : -pieceValue;\n        }\n      });\n    });\n    return score;\n  };\n\n  const makeComputerMove = () => {\n    // Simple computer move logic (you can replace it with more sophisticated AI)\n    const possibleMoves = game.ugly_moves();\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    makeMove(randomMove);\n    setIsComputerMove(false);\n  };\n\n  const pieceValues = {\n    p: 1, // Pawn\n    n: 3, // Knight\n    b: 3, // Bishop\n    r: 5, // Rook\n    q: 9, // Queen\n    k: 1000, // King (very high value)\n  };\n\n  return (\n    <div className=\"App\">\n      {showConfetti && <Confetti />}\n      <h1>Chess Game</h1>\n      <Chessboard\n        width={400}\n        position={game.fen()}\n        onDrop={(sourceSquare, targetSquare) => {\n          const move = game.move({ from: sourceSquare, to: targetSquare });\n          if (move) {\n            makeMove(move);\n          }\n        }}\n      />\n      {gameOver && <div className=\"game-over\">Game Over!</div>}\n      <div className=\"advice\">\n        {advice && <p><strong>Advice:</strong> {advice}</p>}\n      </div>\n      <div className=\"hint\">\n        {hint && <p><strong>Hint:</strong> {hint}</p>}\n      </div>\n      <button onClick={restartGame}>Restart</button>\n      <button onClick={() => setPlayingAgainstComputer(!playingAgainstComputer)}>\n        {playingAgainstComputer ? 'Play Against Yourself' : 'Play Against Computer'}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}