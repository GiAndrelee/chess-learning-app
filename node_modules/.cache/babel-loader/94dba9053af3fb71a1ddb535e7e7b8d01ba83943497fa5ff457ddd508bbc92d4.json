{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard'; // Corrected import\nimport { Chess } from 'chess.js'; // Corrected import\nimport { Button } from 'react-bootstrap'; // If you're using react-bootstrap\nimport './App.css'; // If you have custom styles in App.css, otherwise remove this line\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [gameOver, setGameOver] = useState(false);\n  const [evaluation, setEvaluation] = useState('');\n  const [advice, setAdvice] = useState('');\n  const [hint, setHint] = useState('');\n\n  // Function to handle a move\n  const handleMove = move => {\n    const gameCopy = {\n      ...game\n    }; // Create a copy of the game state\n    gameCopy.ugly_move(move);\n    setGame(gameCopy);\n\n    // Check if the move causes the game to end\n    if (gameCopy.game_over()) {\n      setGameOver(true);\n    } else {\n      provideAdvice(move);\n    }\n  };\n\n  // Function to provide advice after a move\n  const provideAdvice = move => {\n    // Here we will analyze the move and provide tailored advice\n    if (game.game_over()) {\n      setAdvice('Game Over');\n      return;\n    }\n\n    // Check if the move was a mistake or a good move\n    if (isMistake(move)) {\n      setAdvice(`Mistake: ${analyzeMistake(move)}`);\n    } else {\n      setAdvice('Good move, keep going!');\n    }\n\n    // Set evaluation based on the game position\n    setEvaluation(analyzePosition());\n  };\n\n  // Check if the move is a mistake (for simplicity, let's consider it a mistake if the move doesn't help the player gain advantage)\n  const isMistake = move => {\n    // You can refine this logic to detect mistakes based on a more detailed evaluation\n    return Math.random() > 0.8; // Randomly decide if it's a mistake (can be improved with deeper evaluation logic)\n  };\n  const analyzeMistake = move => {\n    return `The move ${move.san} could have been improved by considering a better strategy.`;\n  };\n  const analyzePosition = () => {\n    // Placeholder logic for evaluating the board position\n    return 'Your position is stable, keep up the pressure!';\n  };\n\n  // Function to handle promotion options (no auto-queen promotion)\n  const handlePromotion = piece => {\n    if (piece === 'queen') {\n      // Do not auto promote to a queen, ask the player to choose if needed\n      return;\n    }\n    // Otherwise, handle the promotion here\n  };\n\n  // Function to provide a hint to the user\n  const provideHint = () => {\n    const possibleMoves = game.ugly_moves();\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    setHint(`Try moving ${randomMove.san} to gain an advantage.`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: game.fen(),\n      onDrop: move => handleMove(move),\n      boardOrientation: boardOrientation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Game Over!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 20\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Evaluation: \", evaluation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Advice: \", advice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hint: \", hint]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: provideHint,\n      children: \"Hint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setBoardOrientation(boardOrientation === 'white' ? 'black' : 'white'),\n      children: \"Flip Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pB4IB1DxQokoB04JbIrsJpk/hz4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","Button","jsxDEV","_jsxDEV","App","_s","game","setGame","boardOrientation","setBoardOrientation","gameOver","setGameOver","evaluation","setEvaluation","advice","setAdvice","hint","setHint","handleMove","move","gameCopy","ugly_move","game_over","provideAdvice","isMistake","analyzeMistake","analyzePosition","Math","random","san","handlePromotion","piece","provideHint","possibleMoves","ugly_moves","randomMove","floor","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","fen","onDrop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';  // Corrected import\nimport { Chess } from 'chess.js';  // Corrected import\nimport { Button } from 'react-bootstrap';  // If you're using react-bootstrap\nimport './App.css';  // If you have custom styles in App.css, otherwise remove this line\n\nconst App = () => {\n  const [game, setGame] = useState(new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [gameOver, setGameOver] = useState(false);\n  const [evaluation, setEvaluation] = useState('');\n  const [advice, setAdvice] = useState('');\n  const [hint, setHint] = useState('');\n\n  // Function to handle a move\n  const handleMove = (move) => {\n    const gameCopy = { ...game }; // Create a copy of the game state\n    gameCopy.ugly_move(move);\n    setGame(gameCopy);\n\n    // Check if the move causes the game to end\n    if (gameCopy.game_over()) {\n      setGameOver(true);\n    } else {\n      provideAdvice(move);\n    }\n  };\n\n  // Function to provide advice after a move\n  const provideAdvice = (move) => {\n    // Here we will analyze the move and provide tailored advice\n    if (game.game_over()) {\n      setAdvice('Game Over');\n      return;\n    }\n\n    // Check if the move was a mistake or a good move\n    if (isMistake(move)) {\n      setAdvice(`Mistake: ${analyzeMistake(move)}`);\n    } else {\n      setAdvice('Good move, keep going!');\n    }\n\n    // Set evaluation based on the game position\n    setEvaluation(analyzePosition());\n  };\n\n  // Check if the move is a mistake (for simplicity, let's consider it a mistake if the move doesn't help the player gain advantage)\n  const isMistake = (move) => {\n    // You can refine this logic to detect mistakes based on a more detailed evaluation\n    return Math.random() > 0.8; // Randomly decide if it's a mistake (can be improved with deeper evaluation logic)\n  };\n\n  const analyzeMistake = (move) => {\n    return `The move ${move.san} could have been improved by considering a better strategy.`;\n  };\n\n  const analyzePosition = () => {\n    // Placeholder logic for evaluating the board position\n    return 'Your position is stable, keep up the pressure!';\n  };\n\n  // Function to handle promotion options (no auto-queen promotion)\n  const handlePromotion = (piece) => {\n    if (piece === 'queen') {\n      // Do not auto promote to a queen, ask the player to choose if needed\n      return;\n    }\n    // Otherwise, handle the promotion here\n  };\n\n  // Function to provide a hint to the user\n  const provideHint = () => {\n    const possibleMoves = game.ugly_moves();\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    setHint(`Try moving ${randomMove.san} to gain an advantage.`);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard\n        position={game.fen()}\n        onDrop={(move) => handleMove(move)}\n        boardOrientation={boardOrientation}\n      />\n\n      {gameOver && <p>Game Over!</p>}\n      {!gameOver && <p>Evaluation: {evaluation}</p>}\n      {!gameOver && <p>Advice: {advice}</p>}\n      {!gameOver && <p>Hint: {hint}</p>}\n\n      <Button onClick={provideHint}>Hint</Button>\n\n      <Button onClick={() => setBoardOrientation(boardOrientation === 'white' ? 'black' : 'white')}>\n        Flip Board\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}