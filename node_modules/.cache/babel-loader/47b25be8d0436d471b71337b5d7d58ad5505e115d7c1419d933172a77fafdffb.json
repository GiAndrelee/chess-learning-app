{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chess } from 'chess.js'; // Ensure chess.js is correctly imported\nimport { Chessboard } from 'react-chessboard';\nimport Confetti from 'react-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [fen, setFen] = useState(game.fen());\n  const [advice, setAdvice] = useState('');\n\n  // Function to get advice\n  const getAdvice = () => {\n    // Check if the game is over or if there are no more legal moves\n    const moves = game.ugly_moves(); // Use ugly_moves instead of legal_moves\n    const bestMove = moves[Math.floor(Math.random() * moves.length)];\n    if (moves.length === 0) {\n      setAdvice(\"Game Over. No more moves available.\");\n    } else {\n      setAdvice(`Consider moving ${bestMove.san} to improve your position.`);\n    }\n  };\n\n  // Handle move\n  const handleMove = (from, to) => {\n    const move = game.move({\n      from,\n      to\n    }); // Use the move method\n    if (move === null) return; // If the move is illegal, do nothing\n\n    setFen(game.fen());\n    getAdvice(); // Get advice after each move\n  };\n\n  // Function to handle reset\n  const handleReset = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onPieceDrop: (from, to) => handleMove(from, to),\n      draggable: true,\n      width: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Advice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: advice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lON6J1VCAvZbkLCY1A/J4zZW2kE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Chess","Chessboard","Confetti","jsxDEV","_jsxDEV","App","_s","game","setGame","fen","setFen","advice","setAdvice","getAdvice","moves","ugly_moves","bestMove","Math","floor","random","length","san","handleMove","from","to","move","handleReset","newGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","onPieceDrop","draggable","width","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Chess } from 'chess.js';  // Ensure chess.js is correctly imported\nimport { Chessboard } from 'react-chessboard';\nimport Confetti from 'react-confetti';\n\nfunction App() {\n  const [game, setGame] = useState(new Chess());\n  const [fen, setFen] = useState(game.fen());\n  const [advice, setAdvice] = useState('');\n\n  // Function to get advice\n  const getAdvice = () => {\n    // Check if the game is over or if there are no more legal moves\n    const moves = game.ugly_moves();  // Use ugly_moves instead of legal_moves\n    const bestMove = moves[Math.floor(Math.random() * moves.length)];\n    if (moves.length === 0) {\n      setAdvice(\"Game Over. No more moves available.\");\n    } else {\n      setAdvice(`Consider moving ${bestMove.san} to improve your position.`);\n    }\n  };\n\n  // Handle move\n  const handleMove = (from, to) => {\n    const move = game.move({ from, to });  // Use the move method\n    if (move === null) return;  // If the move is illegal, do nothing\n\n    setFen(game.fen());\n    getAdvice(); // Get advice after each move\n  };\n\n  // Function to handle reset\n  const handleReset = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setFen(newGame.fen());\n    setAdvice('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard\n        position={fen}\n        onPieceDrop={(from, to) => handleMove(from, to)}\n        draggable={true}\n        width={400}\n      />\n      <div>\n        <h2>Game Advice</h2>\n        <p>{advice}</p>\n      </div>\n      <button onClick={handleReset}>Reset Game</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,UAAU,CAAC,CAAE;AACnC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,QAAQ,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAIC,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAACQ,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACE,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMc,SAAS,GAAGA,CAAA,KAAM;IACtB;IACA,MAAMC,KAAK,GAAGP,IAAI,CAACQ,UAAU,CAAC,CAAC,CAAC,CAAE;IAClC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;IAChE,IAAIN,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;MACtBR,SAAS,CAAC,qCAAqC,CAAC;IAClD,CAAC,MAAM;MACLA,SAAS,CAAC,mBAAmBI,QAAQ,CAACK,GAAG,4BAA4B,CAAC;IACxE;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IAC/B,MAAMC,IAAI,GAAGlB,IAAI,CAACkB,IAAI,CAAC;MAAEF,IAAI;MAAEC;IAAG,CAAC,CAAC,CAAC,CAAE;IACvC,IAAIC,IAAI,KAAK,IAAI,EAAE,OAAO,CAAE;;IAE5Bf,MAAM,CAACH,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC;IAClBI,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,OAAO,GAAG,IAAI3B,KAAK,CAAC,CAAC;IAC3BQ,OAAO,CAACmB,OAAO,CAAC;IAChBjB,MAAM,CAACiB,OAAO,CAAClB,GAAG,CAAC,CAAC,CAAC;IACrBG,SAAS,CAAC,EAAE,CAAC;EACf,CAAC;EAED,oBACER,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAAyB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB7B,OAAA,CAACH,UAAU;MACTiC,QAAQ,EAAEzB,GAAI;MACd0B,WAAW,EAAEA,CAACZ,IAAI,EAAEC,EAAE,KAAKF,UAAU,CAACC,IAAI,EAAEC,EAAE,CAAE;MAChDY,SAAS,EAAE,IAAK;MAChBC,KAAK,EAAE;IAAI;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACF7B,OAAA;MAAAyB,QAAA,gBACEzB,OAAA;QAAAyB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB7B,OAAA;QAAAyB,QAAA,EAAIlB;MAAM;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACN7B,OAAA;MAAQkC,OAAO,EAAEZ,WAAY;MAAAG,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAAC3B,EAAA,CAlDQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}