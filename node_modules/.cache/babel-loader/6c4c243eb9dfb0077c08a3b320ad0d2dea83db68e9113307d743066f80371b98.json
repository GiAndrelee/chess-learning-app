{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [advice, setAdvice] = useState(\"Make your first move!\");\n  const [hint, setHint] = useState(\"\");\n  function safeGameMutate(modify) {\n    setGame(g => {\n      const updated = new Chess(g.fen());\n      modify(updated);\n      return updated;\n    });\n  }\n  function evaluateMove(prevGame, move) {\n    const prevEval = evaluatePosition(prevGame);\n    const newEval = evaluatePosition(game);\n    const evalDiff = newEval - prevEval;\n    if (evalDiff < -0.5) {\n      return \"⚠️ That move made your position worse. Look out for threats!\";\n    } else if (evalDiff > 0.5) {\n      return \"✅ Great move! You improved your position.\";\n    } else {\n      return \"➖ Solid move, but there might be stronger ones.\";\n    }\n  }\n  function evaluatePosition(chessInstance) {\n    const material = {\n      p: 1,\n      n: 3,\n      b: 3,\n      r: 5,\n      q: 9\n    };\n    let score = 0;\n    const board = chessInstance.board();\n    for (let row of board) {\n      for (let piece of row) {\n        if (piece) {\n          const value = material[piece.type] || 0;\n          score += piece.color === \"w\" ? value : -value;\n        }\n      }\n    }\n    return score;\n  }\n  function onDrop(sourceSquare, targetSquare, piece) {\n    let move = null;\n    safeGameMutate(gameInstance => {\n      move = gameInstance.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\" // always promote to queen by default\n      });\n    });\n    if (move === null) return false;\n    setMoveHistory(h => [...h, move]);\n    const adviceMsg = evaluateMove(game, move);\n    setAdvice(adviceMsg);\n    setHint(\"\");\n\n    // Computer makes move\n    setTimeout(() => {\n      makeComputerMove();\n    }, 500);\n    return true;\n  }\n  function makeComputerMove() {\n    safeGameMutate(gameInstance => {\n      const moves = gameInstance.moves();\n      if (moves.length > 0) {\n        const move = moves[Math.floor(Math.random() * moves.length)];\n        gameInstance.move(move);\n      }\n    });\n  }\n  function getHint() {\n    const possibleMoves = game.moves({\n      verbose: true\n    });\n    if (possibleMoves.length === 0) {\n      setHint(\"No hints available - checkmate or stalemate!\");\n      return;\n    }\n    let bestMove = null;\n    let bestEval = -Infinity;\n    possibleMoves.forEach(move => {\n      const tempGame = new Chess(game.fen());\n      tempGame.move(move.san);\n      const evaluation = evaluatePosition(tempGame);\n      if (evaluation > bestEval) {\n        bestEval = evaluation;\n        bestMove = move;\n      }\n    });\n    if (bestMove) {\n      setHint(`💡 Hint: Consider moving ${bestMove.from} to ${bestMove.to}. It improves your position!`);\n    } else {\n      setHint(\"Couldn't find a strong hint. Trust your instincts!\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Learn Chess App \\u265F\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: game.fen(),\n      onPieceDrop: onDrop,\n      boardWidth: 500,\n      customBoardStyle: {\n        borderRadius: \"10px\",\n        boxShadow: \"0 5px 15px rgba(0,0,0,0.5)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20,\n        padding: 15,\n        backgroundColor: \"#f0f0f0\",\n        borderRadius: \"10px\",\n        minHeight: \"100px\",\n        textAlign: \"left\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Advice:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: advice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), hint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Hint:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: hint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getHint,\n      style: {\n        marginTop: 20,\n        padding: \"10px 20px\",\n        fontSize: \"16px\",\n        borderRadius: \"8px\",\n        backgroundColor: \"#007bff\",\n        color: \"white\",\n        border: \"none\",\n        cursor: \"pointer\"\n      },\n      children: \"Get a Hint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xh5Ya2aXUCQKK8syqdCVq1WBkWE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chess","Chessboard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","game","setGame","moveHistory","setMoveHistory","advice","setAdvice","hint","setHint","safeGameMutate","modify","g","updated","fen","evaluateMove","prevGame","move","prevEval","evaluatePosition","newEval","evalDiff","chessInstance","material","p","n","b","r","q","score","board","row","piece","value","type","color","onDrop","sourceSquare","targetSquare","gameInstance","from","to","promotion","h","adviceMsg","setTimeout","makeComputerMove","moves","length","Math","floor","random","getHint","possibleMoves","verbose","bestMove","bestEval","Infinity","forEach","tempGame","san","evaluation","className","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","position","onPieceDrop","boardWidth","customBoardStyle","borderRadius","boxShadow","marginTop","backgroundColor","minHeight","textAlign","onClick","fontSize","border","cursor","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"./App.css\";\n\nfunction App() {\n  const [game, setGame] = useState(new Chess());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [advice, setAdvice] = useState(\"Make your first move!\");\n  const [hint, setHint] = useState(\"\");\n\n  function safeGameMutate(modify) {\n    setGame((g) => {\n      const updated = new Chess(g.fen());\n      modify(updated);\n      return updated;\n    });\n  }\n\n  function evaluateMove(prevGame, move) {\n    const prevEval = evaluatePosition(prevGame);\n    const newEval = evaluatePosition(game);\n    const evalDiff = newEval - prevEval;\n\n    if (evalDiff < -0.5) {\n      return \"⚠️ That move made your position worse. Look out for threats!\";\n    } else if (evalDiff > 0.5) {\n      return \"✅ Great move! You improved your position.\";\n    } else {\n      return \"➖ Solid move, but there might be stronger ones.\";\n    }\n  }\n\n  function evaluatePosition(chessInstance) {\n    const material = {\n      p: 1,\n      n: 3,\n      b: 3,\n      r: 5,\n      q: 9,\n    };\n\n    let score = 0;\n    const board = chessInstance.board();\n    for (let row of board) {\n      for (let piece of row) {\n        if (piece) {\n          const value = material[piece.type] || 0;\n          score += piece.color === \"w\" ? value : -value;\n        }\n      }\n    }\n    return score;\n  }\n\n  function onDrop(sourceSquare, targetSquare, piece) {\n    let move = null;\n    safeGameMutate((gameInstance) => {\n      move = gameInstance.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\", // always promote to queen by default\n      });\n    });\n\n    if (move === null) return false;\n\n    setMoveHistory((h) => [...h, move]);\n    const adviceMsg = evaluateMove(game, move);\n    setAdvice(adviceMsg);\n    setHint(\"\");\n\n    // Computer makes move\n    setTimeout(() => {\n      makeComputerMove();\n    }, 500);\n\n    return true;\n  }\n\n  function makeComputerMove() {\n    safeGameMutate((gameInstance) => {\n      const moves = gameInstance.moves();\n      if (moves.length > 0) {\n        const move = moves[Math.floor(Math.random() * moves.length)];\n        gameInstance.move(move);\n      }\n    });\n  }\n\n  function getHint() {\n    const possibleMoves = game.moves({ verbose: true });\n    if (possibleMoves.length === 0) {\n      setHint(\"No hints available - checkmate or stalemate!\");\n      return;\n    }\n\n    let bestMove = null;\n    let bestEval = -Infinity;\n    possibleMoves.forEach((move) => {\n      const tempGame = new Chess(game.fen());\n      tempGame.move(move.san);\n      const evaluation = evaluatePosition(tempGame);\n      if (evaluation > bestEval) {\n        bestEval = evaluation;\n        bestMove = move;\n      }\n    });\n\n    if (bestMove) {\n      setHint(\n        `💡 Hint: Consider moving ${bestMove.from} to ${bestMove.to}. It improves your position!`\n      );\n    } else {\n      setHint(\"Couldn't find a strong hint. Trust your instincts!\");\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{ padding: 20 }}>\n      <h1>Learn Chess App ♟️</h1>\n      <Chessboard\n        position={game.fen()}\n        onPieceDrop={onDrop}\n        boardWidth={500}\n        customBoardStyle={{\n          borderRadius: \"10px\",\n          boxShadow: \"0 5px 15px rgba(0,0,0,0.5)\",\n        }}\n      />\n      <div\n        style={{\n          marginTop: 20,\n          padding: 15,\n          backgroundColor: \"#f0f0f0\",\n          borderRadius: \"10px\",\n          minHeight: \"100px\",\n          textAlign: \"left\",\n        }}\n      >\n        <h3>Advice:</h3>\n        <p>{advice}</p>\n        {hint && (\n          <>\n            <h4>Hint:</h4>\n            <p>{hint}</p>\n          </>\n        )}\n      </div>\n      <button\n        onClick={getHint}\n        style={{\n          marginTop: 20,\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          borderRadius: \"8px\",\n          backgroundColor: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n        }}\n      >\n        Get a Hint\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}