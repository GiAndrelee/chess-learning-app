{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmlee\\\\Downloads\\\\LearnChessApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChessBoard from 'react-chessboard';\nimport Chess from 'chess.js';\nimport { Button } from 'react-bootstrap';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [boardPosition, setBoardPosition] = useState(game.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [evaluation, setEvaluation] = useState('');\n  const [hint, setHint] = useState('');\n\n  // Function to evaluate the current position\n  const evaluatePosition = () => {\n    const evaluationMessage = getPositionEvaluation();\n    setEvaluation(evaluationMessage);\n  };\n  const getPositionEvaluation = () => {\n    const isGameOver = game.game_over();\n    if (isGameOver) {\n      return 'Game over! Checkmate or stalemate.';\n    }\n    const moves = game.ugly_moves();\n    if (moves.length === 0) {\n      return 'No valid moves available!';\n    }\n\n    // Evaluate the position based on material count, piece activity, and threats\n    let score = 0;\n    let message = '';\n\n    // Material Evaluation (Piece count)\n    score += evaluateMaterial(game);\n    message += `Material Score: ${score}\\n`;\n\n    // Positional Evaluation (Piece activity, king safety, etc.)\n    score += evaluatePositionSpecifics(game);\n    message += `Positional Score: ${score}\\n`;\n\n    // Tactical Opportunities\n    const tacticalAdvice = getTacticalAdvice(game);\n    if (tacticalAdvice) {\n      message += `Tactical Advice: ${tacticalAdvice}`;\n    }\n    return message;\n  };\n  const evaluateMaterial = game => {\n    const pieces = game.board();\n    let materialScore = 0;\n    pieces.forEach(row => {\n      row.forEach(square => {\n        if (square) {\n          const pieceValue = getPieceValue(square.type);\n          materialScore += square.color === 'w' ? pieceValue : -pieceValue;\n        }\n      });\n    });\n    return materialScore;\n  };\n  const getPieceValue = pieceType => {\n    const values = {\n      p: 1,\n      // pawn\n      n: 3,\n      // knight\n      b: 3,\n      // bishop\n      r: 5,\n      // rook\n      q: 9,\n      // queen\n      k: 0 // king (doesn't matter as it can't be captured)\n    };\n    return values[pieceType] || 0;\n  };\n  const evaluatePositionSpecifics = game => {\n    let positionScore = 0;\n    // Look at piece activity (center control, piece mobility)\n    // Look at king safety\n    // Look at pawn structure\n\n    // For simplicity, add a basic check for central control\n    const centralSquares = ['d4', 'd5', 'e4', 'e5'];\n    centralSquares.forEach(square => {\n      if (game.get(square) && game.get(square).color === 'w') {\n        positionScore += 1; // White has a piece in the center\n      }\n      if (game.get(square) && game.get(square).color === 'b') {\n        positionScore -= 1; // Black has a piece in the center\n      }\n    });\n    return positionScore;\n  };\n  const getTacticalAdvice = game => {\n    if (game.in_check()) {\n      return 'Your King is in check! You need to move it out of check.';\n    }\n    if (game.in_checkmate()) {\n      return 'Checkmate! The game is over.';\n    }\n    if (game.in_stalemate()) {\n      return 'Stalemate! The game is a draw.';\n    }\n\n    // Example of tactical advice for forks, pins, etc. (this is simplified)\n    const moves = game.ugly_moves();\n    moves.forEach(move => {\n      const potentialMove = game.ugly_move(move);\n      const threatDetected = checkForThreat(potentialMove);\n      if (threatDetected) {\n        return 'This move might set up a tactical threat, like a fork or pin.';\n      }\n    });\n    return ''; // No immediate tactical advice\n  };\n  const checkForThreat = move => {\n    // Simple check for potential attacks (can be expanded)\n    return game.in_checkmate() || game.in_check();\n  };\n  const handleMove = (from, to) => {\n    const move = game.move({\n      from,\n      to\n    });\n    setGame(game);\n    setMoveHistory(game.history());\n    setBoardPosition(game.fen());\n    evaluatePosition(); // Evaluate position after each move\n  };\n  const handleHint = () => {\n    // Basic hint button, showing best move\n    const bestMove = game.ugly_moves()[0]; // For simplicity, just take the first available move\n    setHint(`Try moving: ${bestMove.from} to ${bestMove.to}`);\n  };\n  useEffect(() => {\n    evaluatePosition(); // Initial evaluation\n  }, [game]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ChessBoard, {\n      position: boardPosition,\n      onPieceDrop: handleMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleHint,\n      children: \"Get a Hint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Move History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: move\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Evaluation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: evaluation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Hint:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: hint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Wg4iVdMaAcv88l2QnQkeRK2u5CA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChessBoard","Chess","Button","jsxDEV","_jsxDEV","App","_s","game","setGame","boardPosition","setBoardPosition","fen","moveHistory","setMoveHistory","evaluation","setEvaluation","hint","setHint","evaluatePosition","evaluationMessage","getPositionEvaluation","isGameOver","game_over","moves","ugly_moves","length","score","message","evaluateMaterial","evaluatePositionSpecifics","tacticalAdvice","getTacticalAdvice","pieces","board","materialScore","forEach","row","square","pieceValue","getPieceValue","type","color","pieceType","values","p","n","b","r","q","k","positionScore","centralSquares","get","in_check","in_checkmate","in_stalemate","move","potentialMove","ugly_move","threatDetected","checkForThreat","handleMove","from","to","history","handleHint","bestMove","className","children","position","onPieceDrop","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/gmlee/Downloads/LearnChessApp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChessBoard from 'react-chessboard';\nimport Chess from 'chess.js';\nimport { Button } from 'react-bootstrap';\nimport './App.css';\n\nconst App = () => {\n  const [game, setGame] = useState(new Chess());\n  const [boardPosition, setBoardPosition] = useState(game.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [evaluation, setEvaluation] = useState('');\n  const [hint, setHint] = useState('');\n\n  // Function to evaluate the current position\n  const evaluatePosition = () => {\n    const evaluationMessage = getPositionEvaluation();\n    setEvaluation(evaluationMessage);\n  };\n\n  const getPositionEvaluation = () => {\n    const isGameOver = game.game_over();\n    if (isGameOver) {\n      return 'Game over! Checkmate or stalemate.';\n    }\n\n    const moves = game.ugly_moves();\n    if (moves.length === 0) {\n      return 'No valid moves available!';\n    }\n\n    // Evaluate the position based on material count, piece activity, and threats\n    let score = 0;\n    let message = '';\n\n    // Material Evaluation (Piece count)\n    score += evaluateMaterial(game);\n    message += `Material Score: ${score}\\n`;\n\n    // Positional Evaluation (Piece activity, king safety, etc.)\n    score += evaluatePositionSpecifics(game);\n    message += `Positional Score: ${score}\\n`;\n\n    // Tactical Opportunities\n    const tacticalAdvice = getTacticalAdvice(game);\n    if (tacticalAdvice) {\n      message += `Tactical Advice: ${tacticalAdvice}`;\n    }\n\n    return message;\n  };\n\n  const evaluateMaterial = (game) => {\n    const pieces = game.board();\n    let materialScore = 0;\n    pieces.forEach(row => {\n      row.forEach(square => {\n        if (square) {\n          const pieceValue = getPieceValue(square.type);\n          materialScore += (square.color === 'w' ? pieceValue : -pieceValue);\n        }\n      });\n    });\n    return materialScore;\n  };\n\n  const getPieceValue = (pieceType) => {\n    const values = {\n      p: 1, // pawn\n      n: 3, // knight\n      b: 3, // bishop\n      r: 5, // rook\n      q: 9, // queen\n      k: 0, // king (doesn't matter as it can't be captured)\n    };\n    return values[pieceType] || 0;\n  };\n\n  const evaluatePositionSpecifics = (game) => {\n    let positionScore = 0;\n    // Look at piece activity (center control, piece mobility)\n    // Look at king safety\n    // Look at pawn structure\n\n    // For simplicity, add a basic check for central control\n    const centralSquares = ['d4', 'd5', 'e4', 'e5'];\n    centralSquares.forEach(square => {\n      if (game.get(square) && game.get(square).color === 'w') {\n        positionScore += 1; // White has a piece in the center\n      }\n      if (game.get(square) && game.get(square).color === 'b') {\n        positionScore -= 1; // Black has a piece in the center\n      }\n    });\n\n    return positionScore;\n  };\n\n  const getTacticalAdvice = (game) => {\n    if (game.in_check()) {\n      return 'Your King is in check! You need to move it out of check.';\n    }\n    if (game.in_checkmate()) {\n      return 'Checkmate! The game is over.';\n    }\n    if (game.in_stalemate()) {\n      return 'Stalemate! The game is a draw.';\n    }\n\n    // Example of tactical advice for forks, pins, etc. (this is simplified)\n    const moves = game.ugly_moves();\n    moves.forEach(move => {\n      const potentialMove = game.ugly_move(move);\n      const threatDetected = checkForThreat(potentialMove);\n      if (threatDetected) {\n        return 'This move might set up a tactical threat, like a fork or pin.';\n      }\n    });\n\n    return ''; // No immediate tactical advice\n  };\n\n  const checkForThreat = (move) => {\n    // Simple check for potential attacks (can be expanded)\n    return game.in_checkmate() || game.in_check();\n  };\n\n  const handleMove = (from, to) => {\n    const move = game.move({ from, to });\n    setGame(game);\n    setMoveHistory(game.history());\n    setBoardPosition(game.fen());\n    evaluatePosition();  // Evaluate position after each move\n  };\n\n  const handleHint = () => {\n    // Basic hint button, showing best move\n    const bestMove = game.ugly_moves()[0]; // For simplicity, just take the first available move\n    setHint(`Try moving: ${bestMove.from} to ${bestMove.to}`);\n  };\n\n  useEffect(() => {\n    evaluatePosition();  // Initial evaluation\n  }, [game]);\n\n  return (\n    <div className=\"App\">\n      <ChessBoard\n        position={boardPosition}\n        onPieceDrop={handleMove}\n      />\n      <Button onClick={handleHint}>Get a Hint</Button>\n      <div>\n        <h3>Move History:</h3>\n        <ul>\n          {moveHistory.map((move, index) => (\n            <li key={index}>{move}</li>\n          ))}\n        </ul>\n      </div>\n      <div>\n        <h3>Evaluation:</h3>\n        <p>{evaluation}</p>\n      </div>\n      <div>\n        <h3>Hint:</h3>\n        <p>{hint}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}